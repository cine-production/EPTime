Je comprend pas, cela ne foonctionne pas une fois deployer, il faut que cela fonctionne quand la page ou la PWA est en arrière plans. Aide toi comment base le fichier "magicBell" qui envoie la par exemple la notification welcome au clic de ce bouton (import React, { useEffect, useMemo, useState } from "react"
import { useConfig, clientSettings } from "@magicbell/react-headless"
import { prefetchConfig, registerServiceWorker } from "@magicbell/webpush"

import subscriptionManager from "@/services/subscriptionManager"
<Button
        onClick={handleSubscribe}
        text="Autoriser les notifications"
        classname="bg-primary"
        disabled={false}
      />)

subscriptionManager.ts :
import { v4 as uuid } from "uuid"

import { subscribe } from "@magicbell/webpush"
import magicBell from "./magicBell"

/**
 * Since we send out notifications to a set of user ids, we need to make sure that each PushSubscription is tied to a user id
 * This class ensures that the currently active PushSubscription is invalidated if the user id changes
 */
export class SubscriptionManager {
  public serviceWorkerRegistration: ServiceWorkerRegistration | null = null
  private serviceWorkerReady: Promise<ServiceWorkerRegistration> | null = null
  private listeners: { [listenerId: string]: () => void }

  public static getOrSetUserId() {
    if (typeof window === "undefined") {
      return ""
    }
    const userId = localStorage.getItem("magicbell:userId")
    if (!userId) {
      const newUserId = `${Math.random()}`.slice(2)
      localStorage.setItem("magicbell:userId", newUserId)
      return newUserId
    }
    return userId
  }

  constructor() {
    this.listeners = {}
    if (typeof window === "undefined") {
      return
    }
    this.serviceWorkerReady = window.navigator.serviceWorker?.ready.then(
      (registration) => {
        this.serviceWorkerRegistration = registration
        return registration
      }
    )
  }
  private getSubscriptionId(userId: string) {
    return `magicbell:subscription:${userId}`
  }

  private getActiveSubscription() {
    return this.serviceWorkerReady?.then((registration) =>
      registration.pushManager?.getSubscription()
    )
  }

  public async subscribe(
    userId: string,
    options: {
      token: string
      project: string
      host: string
    }
  ) {
    await subscribe(options)
    await this.saveActiveSubscriptionIdToLocalStorage(userId)
    await this.sendWelcomeNotification(userId)
  }

  public async sendWelcomeNotification(userId: string) {
    this.getActiveSubscriptionFromLocalStorage(userId, async (subscription) => {
      if (!subscription) {
        console.error("No active subscription found")
        return
      }
      magicBell.sendNotification("welcome")
    })
  }

  public async getActiveSubscriptionFromLocalStorage(
    userId: string,
    cb: (
      activeSubscription: PushSubscription | null,
      SubscriptionManager: SubscriptionManager
    ) => void
  ) {
    const activeSubscription = (await this.getActiveSubscription()) || null
    if (!activeSubscription) {
      return cb(null, this)
    }
    const subscriptionId = this.getSubscriptionId(userId)
    const savedSubscription = localStorage.getItem(subscriptionId)

    if (savedSubscription !== activeSubscription?.endpoint) {
      return cb(null, this)
    }
    return cb(activeSubscription, this)
  }

  /**
   * Subscribe to the currently active subscription for the current user. A 'meta-subscription', if you will!
   * @ param userId
   * @ param cb
   * @ returns unsubscribe function
   */
  public subscribeToActiveSubscriptionFromLocalStorage(
    userId: string,
    cb: (
      activeSubscription: PushSubscription | null,
      SubscriptionManager: SubscriptionManager
    ) => void
  ) {
    const listenerId = uuid()
    const wrappedCallback = async () => {
      await this.getActiveSubscriptionFromLocalStorage(userId, cb)
    }
    wrappedCallback()

    this.listeners[listenerId] = wrappedCallback
    return () => {
      delete this.listeners[listenerId]
    }
  }

  public triggerListeners() {
    Object.values(this.listeners).forEach((listener) => listener())
  }

  private async saveActiveSubscriptionIdToLocalStorage(userId: string) {
    const activeSubscription = await this.getActiveSubscription()
    if (!activeSubscription) {
      throw new Error("No active subscription found")
    }
    const subscriptionId = this.getSubscriptionId(userId)
    localStorage.setItem(subscriptionId, activeSubscription.endpoint)
  }
}

const subscriptionManager = new SubscriptionManager()

export default subscriptionManager

magicBell.ts :
import { clientSettings } from "@magicbell/react-headless"
import { topics } from "@/constants/topics"

type TopicSubscription = {
  topic: string
  categories: Array<{
    reason: string
    slug: string
    status: "subscribed" | "unsubscribed"
  }>
}

export type NotificationType =
  | "welcome"
  | "hn_top_story"
  | "hn_top_new"
  | "hn_random"

class MagicBell {
  constructor() {}

  private getUserId() {
    return clientSettings.getState().userExternalId as string
  }

  /**
   * Send post request to endpoint, with userId in body
   */
  public async sendNotification(type: NotificationType) {
    const userId = this.getUserId()
    if (!userId) {
      return
    }
    const response = await fetch(`/api/${type}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ userId }),
    })
    if (!response.ok) {
      throw new Error(`Failed to send ${type} notification`)
    }
  }

  /**
   * Get the topics that the user is subscribed to
   */
  public getTopics() {
    const userId = this.getUserId()
    if (!userId) {
      return
    }
    return fetch("https://api.magicbell.com/subscriptions", {
      headers: {
        "X-MAGICBELL-API-KEY": process.env.NEXT_PUBLIC_MAGICBELL_API_KEY,
        "X-MAGICBELL-USER-EXTERNAL-ID": userId,
      },
    })
      .then((response) => response.json())
      .then((data) => {
        return (
          data.subscriptions
            ?.filter((subscription: TopicSubscription) =>
              subscription.categories.some((c) => c.status === "subscribed")
            )
            .map((subscription: TopicSubscription) => subscription.topic) || []
        )
      })
  }

  /**
   * Subscribe a user to a topic
   * @param topic The topic to subscribe to
   * @param notify Whether to send a notification to the user on subscription
   */
  public async subscribeToTopic(topic: string, notify: boolean = false) {
    const userId = this.getUserId()
    if (!userId) {
      return
    }
    await fetch(`https://api.magicbell.com/subscriptions`, {
      method: "POST",
      headers: {
        "X-MAGICBELL-API-KEY": process.env.NEXT_PUBLIC_MAGICBELL_API_KEY,
        "X-MAGICBELL-USER-EXTERNAL-ID": userId,
      },
      body: JSON.stringify({
        subscription: {
          categories: [
            {
              slug: "default",
              status: "subscribed",
              reason: "user",
            },
          ],
          topic,
        },
      }),
    }).then((response) => response.json())
    if (notify) {
      await this.sendNotification(this.getWelcomeEndpointForTopic(topic))
    }
  }

  /**
   * Unsubscribe the user from a topic
   */
  public unsubscribeFromTopic(topic: string) {
    const userId = this.getUserId()
    if (!userId) {
      return
    }
    return fetch(
      `https://api.magicbell.com/subscriptions/${topic}/unsubscribe`,
      {
        method: "POST",
        headers: {
          "X-MAGICBELL-API-KEY": process.env.NEXT_PUBLIC_MAGICBELL_API_KEY,
          "X-MAGICBELL-USER-EXTERNAL-ID": userId,
        },
        body: JSON.stringify({
          subscription: {
            categories: [
              {
                slug: "default",
                status: "unsubscribed",
                reason: "user",
              },
            ],
          },
        }),
      }
    ).then((response) => response.json())
  }

  /**
   * Each return value needs to correspond to an API file defined in pages/api
   */
  private getWelcomeEndpointForTopic(topic: string): NotificationType {
    switch (topic) {
      case topics["HN Top Story"].id:
        return "hn_top_story"
      case topics["HN Top New"].id:
        return "hn_top_new"
      default:
        return "welcome"
    }
  }
}

const magicBell = new MagicBell()

export default magicBell

welcome.ts : 
import MagicBell from "magicbell"
import type { NextApiRequest, NextApiResponse } from "next"

interface WelcomeRequest extends NextApiRequest {
  body: {
    userId: string
  }
}

type ResponseData = {
  status: string
}

const magicbell = new MagicBell({
  apiKey: process.env.NEXT_PUBLIC_MAGICBELL_API_KEY,
  apiSecret: process.env.MAGICBELL_API_SECRET,
})

export default async function handler(
  req: WelcomeRequest,
  res: NextApiResponse<ResponseData>
) {
  await magicbell.notifications.create({
    title: "Merci !",
    content: "Vous pouvez désormais recevoir des notifications sur les temps d'attente.",
    action_url: "",
    recipients: [{ external_id: req.body.userId }],
    category: "default",
  })
  res.status(200).json({ status: "success" })
}

(pour rapelle, il doit envoyer une notification automatiquement tous les matins 5 minutes avant l'ouverture du parc {openParc} si isFeatureEnabled est coché.